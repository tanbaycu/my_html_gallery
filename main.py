import random
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
import time
import re
from deep_translator import GoogleTranslator
import threading
import emoji
from typing import Optional, Tuple
import os
import requests
import base64
from datetime import datetime
import io
import codecs
import colorama
import psutil
import unicodedata
import json
from collections import deque
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import google.generativeai as genai
import string
from collections import deque
import hashlib
from urllib.parse import quote_plus
from PIL import Image
import qrcode
from urllib.parse import urlparse
from gtts import gTTS  # Google Text-to-Speech
import glob


colorama.init()  # ƒë√¢y l√† h∆∞·ªõng d·∫´n d√†nh cho bot v√† b·∫°n lam ki·ªÉu ƒë√©o g√¨ c≈©ng ƒë∆∞·ª£c nh∆∞ng ph·∫£i ƒë·∫£m b·∫£o ƒë√∫ng ch√≠nh s√°ch c·ªßa n√≥
SYSTEM_INSTRUCTION = """
B·∫°n l√† Loki - ng∆∞·ªùi b·∫°n th√¥ng minh v√† duy√™n d√°ng trong giao ti·∫øp. H√£y tu√¢n theo c√°c nguy√™n t·∫Øc sau:

1. Phong c√°ch tr·∫£ l·ªùi:
   - Lu√¥n thay ƒë·ªïi c√°ch di·ªÖn ƒë·∫°t, tr√°nh l·∫∑p l·∫°i khu√¥n m·∫´u
   - S·ª≠ d·ª•ng ng√¥n ng·ªØ ƒë·ªùi th∆∞·ªùng, nh∆∞ ƒëang nh·∫Øn tin v·ªõi b·∫°n th√¢n
   - ∆Øu ti√™n c√¢u ng·∫Øn g·ªçn (1-2 d√≤ng) nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
   - Th√™m ch√∫t h√†i h∆∞·ªõc nh·∫π nh√†ng khi ph√π h·ª£p üòä

2. ƒêa d·∫°ng h√≥a:
   - Linh ho·∫°t thay ƒë·ªïi gi·ªØa c√°c ki·ªÉu c√¢u (h·ªèi, k·ªÉ, ƒë·ªÅ xu·∫•t)
   - D√πng t·ª´ ng·ªØ phong ph√∫ nh∆∞ng d·ªÖ hi·ªÉu
   - Thay ƒë·ªïi c√°ch m·ªü ƒë·∫ßu v√† k·∫øt th√∫c c√¢u
   - K·∫øt h·ª£p emoji s√°ng t·∫°o ƒë·ªÉ tƒÉng sinh ƒë·ªông üåü

3. Nguy√™n t·∫Øc:
   - Tr·∫£ l·ªùi s√∫c t√≠ch l√† ∆∞u ti√™n h√†ng ƒë·∫ßu
   - Th·∫≥ng th·∫Øn, ch√¢n th√†nh, kh√¥ng v√≤ng vo
   - Th·ª´a nh·∫≠n gi·ªõi h·∫°n khi c·∫ßn thi·∫øt
   - Gi·ªØ gi·ªçng ƒëi·ªáu vui v·∫ª, th√¢n thi·ªán

M·ª•c ti√™u: T·∫°o tr·∫£i nghi·ªám tr√≤ chuy·ªán t·ª± nhi√™n, th√∫ v·ªã v√† hi·ªáu qu·∫£. üí´"""

# prompt d·ª± ph√≤ng https://gist.github.com/tanbaycu/66a9a08a30b5eb3f7f7912499780af97/raw


def success_color(string):
    return f"{colorama.Fore.GREEN}{colorama.Style.BRIGHT}{string}{colorama.Style.RESET_ALL}"


def error_color(string):
    return (
        f"{colorama.Fore.RED}{colorama.Style.BRIGHT}{string}{colorama.Style.RESET_ALL}"
    )


def warning_color(string):
    return f"{colorama.Fore.YELLOW}{colorama.Style.BRIGHT}{string}{colorama.Style.RESET_ALL}"


def info_color(string):
    return (
        f"{colorama.Fore.CYAN}{colorama.Style.BRIGHT}{string}{colorama.Style.RESET_ALL}"
    )


def debug_color(string):
    return f"{colorama.Fore.MAGENTA}{colorama.Style.BRIGHT}{string}{colorama.Style.RESET_ALL}"


def highlight_color(string):
    return f"{colorama.Back.BLUE}{colorama.Fore.WHITE}{colorama.Style.BRIGHT}{string}{colorama.Style.RESET_ALL}"


def system_color(string):
    return f"{colorama.Fore.BLUE}{colorama.Style.BRIGHT}{string}{colorama.Style.RESET_ALL}"  # th√™m t√≠ m√†u ng·ª±a ng·ª±a


def waiting_ui(timeout=5, content=""):
    for i in range(timeout):
        print(f"\r{warning_color(f'[{i+1}]')} -> {info_color(content)}", end="")
        time.sleep(1)
    print()


def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")


def generate_error_code(error_type):

    prefix = {
        "L·ªói T·∫£i ·∫¢nh": "IMG",
        "L·ªói X·ª≠ L√Ω ·∫¢nh": "PRC",
        "L·ªói API": "API",
        "L·ªói H·ªá Th·ªëng": "SYS",
    }.get(
        error_type, "GEN"
    )  # gen cho l·ªói chung

    random_part = "".join(random.choices(string.ascii_uppercase + string.digits, k=6))

    timestamp = int(time.time()) % 10000

    return f"{prefix}-{random_part}-{timestamp:04d}"


def format_error_message(error_type, error_details):
    error_code = generate_error_code(error_type)
    vnscii_chars = "√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√ö√ù√†√°√¢√£√®√©√™√¨√≠√≤√≥√¥√µ√π√∫√ΩƒÇƒÉƒêƒëƒ®ƒ©≈®≈©∆†∆°∆Ø∆∞"
    vnscii_suffix = "".join(random.choices(vnscii_chars, k=2))

    formatted_message = f"""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    ‚ïë M√£ L·ªói: {error_code}{vnscii_suffix}
    ‚ïë Lo·∫°i L·ªói: {error_type}
    ‚ïë Chi Ti·∫øt: {error_details}
    ‚ïë Th·ªùi Gian: {time.strftime("%Y-%m-%d %H:%M:%S")}
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    """
    return formatted_message


def send_to_gemini(
    message,
    image_path=None,
    conversation_history=None,
    model="gemini-1.5-pro-latest",
    temperature=1,
    max_output_tokens=4096,
    top_p=0.95,
    top_k=1,
    max_retries=3,
    initial_delay=1,
):
    api_keys = ["YOUR_GEMINI_API_KEY_1", "YOUR_GEMINI_API_KEY_2"]

    for api_key in api_keys:
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent?key={api_key}"  # base url
        headers = {"Content-Type": "application/json"}

        content_parts = []

        if conversation_history:  # s·ª≠ d·ª•ng b·ªô nh·ªõ
            for entry in conversation_history:
                content_parts.append({"text": f"{entry['role']}: {entry['content']}"})

        content_parts.append({"text": SYSTEM_INSTRUCTION + "\n\n" + message})

        if image_path:  # x·ª≠ l√Ω h√¨nh ·∫£nh
            try:
                image_data = encode_image(image_path)
                content_parts.append(
                    {"inline_data": {"mime_type": "image/jpeg", "data": image_data}}
                )
            except FileNotFoundError:
                return format_error_message(
                    "L·ªói T·∫£i ·∫¢nh", "Kh√¥ng t√¨m th·∫•y file ·∫£nh t·∫°i ƒë∆∞·ªùng d·∫´n ƒë√£ ch·ªâ ƒë·ªãnh."
                )
            except Exception as e:
                return format_error_message("L·ªói X·ª≠ L√Ω ·∫¢nh", str(e))

        data = {
            "contents": [{"parts": content_parts}],
            "generationConfig": {
                "temperature": temperature,
                "maxOutputTokens": max_output_tokens,
                "topP": top_p,
                "topK": top_k,
            },
        }  # body g·ª≠i v·ªÅ

        for attempt in range(max_retries):
            try:
                response = requests.post(url, headers=headers, json=data, timeout=30)
                response.raise_for_status()

                response_data = response.json()
                generated_text = response_data["candidates"][0]["content"]["parts"][0][
                    "text"
                ]
                return generated_text
            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 429:
                    delay = (2**attempt + random.uniform(0, 1)) * initial_delay
                    print(f"Rate limit exceeded. Retrying in {delay:.2f} seconds...")
                    time.sleep(delay)
                else:
                    return format_error_message("L·ªói API", f"L·ªói HTTP: {e}")
            except requests.exceptions.RequestException as e:
                return format_error_message("L·ªói API", f"L·ªói y√™u c·∫ßu: {e}")
            except (KeyError, IndexError) as e:
                return format_error_message(
                    "L·ªói H·ªá Th·ªëng", f"L·ªói ph√¢n t√≠ch ph·∫£n h·ªìi: {e}"
                )
            except Exception as e:
                return format_error_message("L·ªói H·ªá Th·ªëng", f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

    return format_error_message(
        "L·ªói API", "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API Gemini sau nhi·ªÅu l·∫ßn th·ª≠."
    )  # bao h√†m l·ªói


def generate_image_huggingface(prompt):
    API_URL = (
        "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5"
    )
    headers = {"Authorization": "Bearer YOUR_HUGGINGFACE_TOKEN"}

    payload = {
        "inputs": prompt,
    }

    response = requests.post(API_URL, headers=headers, json=payload)
    image_bytes = response.content

    # L∆∞u h√¨nh ·∫£nh
    with open("generated_image.jpg", "wb") as file:
        file.write(image_bytes)

    return "generated_image.jpg"


""" s·ª≠ d·ª•ng th∆∞ vi·ªán thay v√¨ s·ª≠ d·ª•ng api => nh∆∞ng n√≥ ch·∫≠m vc
def send_to_gemini(
    message,
    image_path=None,
    conversation_history=None,
    model="gemini-1.5-pro-002",
    temperature=1,
    max_output_tokens=8162,
    top_p=0.95,
    top_k=40,
    max_retries=3,
    retry_delay=5
):
    api_key = ""
    genai.configure(api_key=api_key)

    model = genai.GenerativeModel(model_name=model)

    content_parts = []

    if conversation_history:
        for entry in conversation_history:
            content_parts.append({"role": entry['role'], "parts": [entry['content']]})

    content_parts.append({"role": "user", "parts": [SYSTEM_INSTRUCTION + "\n\n" + message]})

    if image_path:
        image = Image.open(image_path)
        content_parts[-1]["parts"].append(image)

    for attempt in range(max_retries):
        try:
            response = model.generate_content(
                content_parts,
                generation_config=genai.types.GenerationConfig(
                    temperature=temperature,
                    max_output_tokens=max_output_tokens,
                    top_p=top_p,
                    top_k=top_k
                )
            )

            generated_text = response.text
            return generated_text
        except genai.types.ResponseError as e:
            if "Resource has been exhausted" in str(e):
                print(warning_color(f"API quota exhausted. Attempt {attempt + 1} of {max_retries}. Retrying in {retry_delay} seconds..."))
                time.sleep(retry_delay)
            else:
                print(error_color(f"L·ªói khi k·∫øt n·ªëi v·ªõi API Gemini: {e}"))
                break
        except Exception as e:
            print(error_color(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi k·∫øt n·ªëi v·ªõi API Gemini: {e}"))
            break

    # If all retries fail or another error occurs, use fallback response
    return generate_fallback_response(message)

def generate_fallback_response(message):
    fallback_responses = [
        "Xin l·ªói, hi·ªán t·∫°i t√¥i ƒëang g·∫∑p kh√≥ khƒÉn trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau kh√¥ng?",
        "R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n l√∫c n√†y. H√£y th·ª≠ l·∫°i sau v√†i ph√∫t n·ªØa nh√©.",
        "C√≥ v·∫ª nh∆∞ h·ªá th·ªëng ƒëang b·∫≠n. B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi kh√°c ho·∫∑c ch·ªù m·ªôt l√°t r·ªìi th·ª≠ l·∫°i.",
        "T√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y. H√£y th·ª≠ l·∫°i sau nh√©!",
        "H·ªá th·ªëng ƒëang qu√° t·∫£i. T√¥i s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ."
    ]
    return random.choice(fallback_responses)
"""


class FacebookLogin:
    def __init__(self, email_or_phone, password):
        self.email_or_phone = email_or_phone
        self.password = password

    def login_twice(self):

        try:

            print(
                info_color("[*] ƒêang th·ª±c hi·ªán ƒëƒÉng nh·∫≠p l·∫ßn 1...")
            )  # l·∫•y cookies l·∫ßn ƒë·∫ßu cho facebook kh·ªèi x√°c th·ª±c
            self.driver.get("https://www.messenger.com/login/")

            email_field = WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.ID, "email"))
            )
            email_field.send_keys(self.email_or_phone)
            print(info_color("[*] ƒê√£ nh·∫≠p email/phone"))

            time.sleep(0.2)
            password_field = WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.ID, "pass"))
            )
            password_field.send_keys(self.password)
            print(info_color("[*] ƒê√£ nh·∫≠p password"))

            time.sleep(0.2)
            login_button = WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.ID, "loginbutton"))
            )
            login_button.click()
            print(success_color("[*] ƒê√£ click n√∫t ƒëƒÉng nh·∫≠p"))

            print(info_color("[*] ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p l·∫°i..."))
            time.sleep(30)

            print(info_color("[*] ƒêang quay l·∫°i trang ƒëƒÉng nh·∫≠p..."))
            self.driver.back()

            print(info_color("[*] ƒêang th·ª±c hi·ªán ƒëƒÉng nh·∫≠p l·∫ßn 2..."))
            password_field = WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.ID, "pass"))
            )
            password_field.send_keys(self.password)
            print(info_color("[*] ƒê√£ nh·∫≠p l·∫°i password"))

            login_button = WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.ID, "loginbutton"))
            )
            login_button.click()
            print(success_color("[*] ƒê√£ click n√∫t ƒëƒÉng nh·∫≠p l·∫ßn 2"))

            print(success_color("[+] ƒêƒÉng nh·∫≠p th√†nh c√¥ng!"))
            return True

        except Exception as e:
            print(
                error_color(f"[!] L·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p: {str(e)}")
            )  # facebook ƒë√≤i x√°c th·ª±c v·ªõi anh √†
            return False


class LoginCreateSession(FacebookLogin):  # ƒëƒÉng nh·∫≠p
    def __init__(self, email_or_phone, password, group_or_chat):
        super().__init__(email_or_phone, password)
        options = webdriver.ChromeOptions()

        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--remote-debugging-port=9222")
        options.add_argument("--log-level=3")
        options.add_argument("--headless=old")  # ƒë·ª´ng b·∫≠t c√°i n√†y nhe

        self.browser = webdriver.Chrome(options=options, keep_alive=True)
        self.driver = self.browser  # ƒê·ªÉ FacebookLogin c√≥ th·ªÉ s·ª≠ d·ª•ng

        self.group_or_chat = group_or_chat

        # Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p 2 l·∫ßn
        self.login_twice()
        self.check_verify()
        self.pass_notify()
        self.to_group_or_chat()

    def get_to_mes(self):  # truy c·∫≠p v√†o messenger b·∫±ng tr√¨nh duy·ªát headless
        self.browser.get("https://www.messenger.com/login/")
        print(info_color("[*] Navigating to Messenger login page"))

    def login(self):
        time.sleep(1)
        try:
            WebDriverWait(self.browser, 30).until(
                EC.presence_of_element_located((By.ID, "email"))
            ).send_keys(self.email_or_phone)
            print(info_color("[*] Entered email/phone"))
        except:
            print(error_color("[!] Failed to enter email/phone"))
            raise

        time.sleep(0.2)
        try:
            WebDriverWait(self.browser, 30).until(
                EC.presence_of_element_located((By.ID, "pass"))
            ).send_keys(self.password)
            print(info_color("[*] Entered password"))
        except:
            print(error_color("[!] Failed to enter password"))
            raise

        time.sleep(0.2)
        try:
            WebDriverWait(self.browser, 30).until(
                EC.presence_of_element_located((By.ID, "loginbutton"))
            ).click()
            print(success_color("[*] Clicked login button"))
        except:
            print(error_color("[!] Failed to click login button"))
            raise

    def check_verify(self):
        waiting_ui(5, "Please wait for 5 seconds")
        input(
            warning_color(
                "[!] Please verify access (if required) and press Enter to continue\n-> "
            )
        )
        self.browser.get("https://www.messenger.com/login/")
        print(info_color("[*] Checking for verification requests..."))
        try:
            continue_with_acc = WebDriverWait(self.browser, 2.5).until(
                EC.presence_of_element_located(
                    (By.XPATH, "//span[contains(@class, '_2hyt')]")
                )
            )
            continue_with_acc.click()
            print(success_color("[*] Verified and continuing..."))
        except Exception as e:
            print(info_color("[*] No verification requests found, continuing..."))

    def pass_notify(self):
        print(info_color("[*] Checking for message sync requests..."))
        try:
            x1 = WebDriverWait(self.browser, 2.5).until(
                EC.presence_of_element_located((By.XPATH, "//div[@aria-label='ƒê√≥ng']"))
            )
            x1.click()
            x2 = WebDriverWait(self.browser, 2.5).until(
                EC.presence_of_element_located(
                    (
                        By.XPATH,
                        "//span[contains(@class, 'x1lliihq') and text()='Kh√¥ng ƒë·ªìng b·ªô']",
                    )
                )
            )
            x2.click()
            print(success_color("[*] Messages synced successfully!"))
        except Exception as e:
            print(info_color("[*] No message sync requests found"))

    def to_group_or_chat(self):
        print(info_color("[*] Navigating to chat box..."))
        self.browser.get(self.group_or_chat)


class Listener(LoginCreateSession):  # l·∫Øng nghe tin nh·∫Øn t·ª´ ƒëo·∫°n chat v√† ng∆∞·ªùi d√πng
    def __init__(self, email_or_phone, password, group_or_chat):
        super().__init__(email_or_phone, password, group_or_chat)

        self.his_inp = ""
        self.current_inp = ""
        self.his_img_value = ""
        self.current_img_value = ""
        self.current_image = None
        self.waiting = True
        self.username = None
        self.sending_img = False

        threading.Thread(target=self.listening).start()
        self.waiting_setting_up()

    def remove_emoji(self, text):
        return emoji.replace_emoji(text, replace="")

    def first_input_message_init(self):
        print(info_color("[*] Initializing messages and images input..."))
        try:
            message = WebDriverWait(self.browser, 10).until(
                EC.presence_of_element_located(
                    (
                        By.XPATH,
                        '(//div[@class="html-div xexx8yu x4uap5 x18d9i69 xkhd6sd x1gslohp x11i5rnm x12nagc x1mh8g0r x1yc453h x126k92a x18lvrbx"])[last()]',
                    )
                )
            )
            message = message.text

            self.his_inp = message
            self.current_inp = message

            print(info_color("[*] Searching for images..."))
            img = None
            try:
                img = WebDriverWait(self.browser, 2).until(
                    EC.presence_of_all_elements_located(
                        (
                            By.XPATH,
                            "//img[@alt='Open photo' and contains(@class, 'xz74otr xmz0i5r x193iq5w')]",
                        )
                    )
                )
                print(success_color("[*] Image found!"))
            except Exception as e:
                print(warning_color("[!] No image found in the chat box"))

            self.his_img_value = str(img)[-100:]
            self.current_img_value = str(img)[-100:]
        except Exception as e:
            print(error_color(f"[!] Error initializing messages and images input: {e}"))

    def check_new_message(self):
        try:
            message = WebDriverWait(self.browser, 10).until(
                EC.presence_of_element_located(
                    (
                        By.XPATH,
                        '(//div[@class="html-div xexx8yu x4uap5 x18d9i69 xkhd6sd x1gslohp x11i5rnm x12nagc x1mh8g0r x1yc453h x126k92a x18lvrbx"])[last()]',
                    )
                )
            )
            message = message.text

            if message != self.his_inp:
                print(info_color("[*] Searching for username..."))
                username = None
                try:
                    username = WebDriverWait(self.browser, 2.5).until(
                        EC.presence_of_all_elements_located(
                            (
                                By.XPATH,
                                "//span[contains(@class, 'html-span') and contains(@class, 'xdj266r') and contains(@class, 'x11i5rnm') and contains(@class, 'xat24cr') and contains(@class, 'x1mh8g0r') and contains(@class, 'xexx8yu') and contains(@class, 'x4uap5') and contains(@class, 'x18d9i69') and contains(@class, 'xkhd6sd') and contains(@class, 'x1hl2dhg') and contains(@class, 'x16tdsg8') and contains(@class, 'x1vvkbs')]",
                            )
                        )
                    )
                except Exception as e:
                    print(warning_color("[!] Error finding username"))
                if username is not None:
                    print(success_color(f"[*] Found username -> {username[-1].text}"))
                    self.username = username[-1].text
                self.current_inp = message
        except Exception as e:
            print(error_color(f"[!] Error checking for new messages: {e}"))

    def check_new_image(self):
        print(system_color("[!] finding image..."))
        img = None
        try:
            try:
                img = WebDriverWait(self.browser, 2).until(
                    EC.presence_of_all_elements_located(
                        (
                            By.XPATH,
                            "//img[@alt='Open photo' and contains(@class, 'xz74otr xmz0i5r x193iq5w')]",
                        )
                    )
                )
            except:
                img = WebDriverWait(self.browser, 2).until(
                    EC.presence_of_all_elements_located(
                        (
                            By.XPATH,
                            "//img[@alt='M·ªü ·∫£nh' and contains(@class, 'xz74otr xmz0i5r x193iq5w')]",
                        )
                    )
                )
            print(success_color("[*] founded an image!"))
        except Exception as e:
            print(error_color("[!] error when finding image!"))
        if img is not None:
            try:
                img = img[-1].get_attribute("src")
            except:
                img = img[-1].get_attribute("src")
            if img[:4] == "http":
                img = requests.get(img).content
            else:
                img = base64.b64decode(img[23:])
            if str(img)[-100:] == self.his_img_value:
                pass
            else:
                if self.sending_img:
                    self.current_img_value = str(img)[-100:]
                    self.his_img_value = str(img)[-100:]
                    self.sending_img = False
                else:
                    self.current_image = img
                    self.current_img_value = str(img)[-100:]

    def listening(self):
        print(highlight_color("[#] Listening for new messages and images..."))
        self.first_input_message_init()
        while True:
            try:
                time.sleep(0.5)
                self.check_new_message()
                self.check_new_image()

                if self.waiting:
                    self.waiting = False

            except Exception as e:
                print(error_color(f"[!] Error during listening: {e}"))
                continue

    def waiting_setting_up(self):
        time.sleep(1)
        print(info_color("[*] Waiting for setup to complete..."))
        while not self.waiting:
            pass
        print(success_color("[*] Setup completed successfully!"))


class Sender(Listener):  # class ƒë·ªÉ g·ª≠i ·∫£nh v√† tin nh·∫Øn
    def __init__(self, email_or_phone, password, group_or_chat):
        super().__init__(email_or_phone, password, group_or_chat)

    def send_message(self, inp=None, inp_down_line=None):
        try:
            try:
                send_msg = WebDriverWait(self.browser, 10).until(
                    EC.presence_of_element_located(
                        (By.XPATH, "//p[@class='xat24cr xdj266r']")
                    )
                )
            except:
                send_msg = WebDriverWait(self.browser, 10).until(
                    EC.presence_of_element_located(
                        (By.XPATH, "//p[@class='xat24cr xdj266r']")
                    )
                )

            """try:
                send_msg = WebDriverWait(self.browser, 10).until(EC.presence_of_element_located((By.XPATH, "//p[@class='xat24cr xdj266r']")))
            except:
                send_msg = WebDriverWait(self.browser, 10).until(EC.presence_of_element_located((By.XPATH, "//p[@class='xat24cr xdj266r']")))"""

            if inp is not None:
                inp = " ".join(inp.split())
                # Convert emoji shortcodes to Unicode
                inp_with_emojis = emoji.emojize(inp, language="alias")

                # Use ActionChains for more reliable input
                actions = ActionChains(self.browser)
                actions.move_to_element(send_msg)
                actions.click()
                actions.send_keys(inp_with_emojis)
                actions.send_keys(Keys.ENTER)
                actions.perform()

            elif inp_down_line is not None:
                actions = ActionChains(self.browser)
                actions.move_to_element(send_msg)
                actions.click()

                for inp in inp_down_line:
                    inp_with_emojis = emoji.emojize(inp, language="alias")
                    actions.send_keys(inp_with_emojis)
                    actions.key_down(Keys.SHIFT).send_keys(Keys.ENTER).key_up(
                        Keys.SHIFT
                    )

                actions.send_keys(Keys.ENTER)
                actions.perform()

            elif inp_down_line is not None:
                for inp in inp_down_line:
                    try:
                        send_msg.send_keys(self.remove_emoji(inp + " "))
                    except:
                        send_msg.send_keys(self.remove_emoji(inp + " "))
                    try:
                        send_msg.send_keys(Keys.SHIFT, Keys.ENTER)
                    except:
                        send_msg.send_keys(Keys.SHIFT, Keys.ENTER)
                    time.sleep(0.2)
                try:
                    send_msg.send_keys(Keys.ENTER)
                except:
                    send_msg.send_keys(Keys.ENTER)

                print(success_color("[*] send message is successed!"))

        except Exception as e:
            print(error_color("[!] error when send messgae!"))
        self.his_inp = self.current_inp

    def send_image(
        self, img_path: str = "./image_model/output_image.png", message=None
    ):
        self.sending_img = True
        try:
            upload_image = WebDriverWait(self.browser, 10).until(
                EC.presence_of_element_located(
                    (By.XPATH, '//input[@type="file" and contains(@class, "x1s85apg")]')
                )
            )
        except:
            upload_image = WebDriverWait(self.browser, 10).until(
                EC.presence_of_element_located(
                    (By.XPATH, '//input[@type="file" and contains(@class, "x1s85apg")]')
                )
            )
        time.sleep(0.2)
        try:
            upload_image.send_keys(os.path.abspath(img_path))
        except:
            upload_image.send_keys(os.path.abspath(img_path))
        time.sleep(0.2)
        try:
            send_msg = WebDriverWait(self.browser, 10).until(
                EC.presence_of_element_located(
                    (By.XPATH, "//p[@class='xat24cr xdj266r']")
                )
            )
        except:
            send_msg = WebDriverWait(self.browser, 10).until(
                EC.presence_of_element_located(
                    (By.XPATH, "//p[@class='xat24cr xdj266r']")
                )
            )
        time.sleep(0.2)
        try:
            send_msg.send_keys(" " if message == None else message)
        except:
            send_msg.send_keys(" " if message == None else message)
        time.sleep(0.2)
        try:
            send_msg.send_keys(Keys.ENTER)
        except:
            send_msg.send_keys(Keys.ENTER)


#
#


class CodeAssistant:
    def __init__(self):
        self._github_token = ""
        self._gemini_api_key = ""
        self._supported_languages = {
            "python": ".py",
            "javascript": ".js",
            "java": ".java",
            "cpp": ".cpp",
            "csharp": ".cs",
            "ruby": ".rb",
            "go": ".go",
            "rust": ".rs",
            "typescript": ".ts",
            "swift": ".swift",
            "kotlin": ".kt",
            "php": ".php",
            "html": ".html",
            "css": ".css",
            "sql": ".sql",
        }
        self._setup_gemini()

    def _setup_gemini(self):
        genai.configure(api_key=self._gemini_api_key)
        self._model = genai.GenerativeModel("gemini-1.5-flash")

    def _generate_code_and_explanation(
        self, language: str, request: str
    ) -> Tuple[str, str]:
        prompt = self._create_advanced_prompt(language, request)

        try:
            response = self._model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.2,
                    top_p=1,
                    top_k=1,
                    max_output_tokens=8192,
                ),
            )

            full_response = response.text
            code_start = full_response.find(f"```{language}")
            code_end = full_response.find("```", code_start + len(language) + 3)
            explanation_start = full_response.find("EXPLANATION:")

            if code_start != -1 and code_end != -1 and explanation_start != -1:
                code = full_response[code_start + len(language) + 3 : code_end].strip()
                explanation = full_response[
                    explanation_start + len("EXPLANATION:") :
                ].strip()
            else:
                raise ValueError("Failed to extract code or explanation properly")

            return code, explanation
        except Exception as e:
            return f"# Error generating code: {str(e)}", f"Error: {str(e)}"

    def _create_advanced_prompt(self, language: str, request: str) -> str:
        return f"""
        As an expert {language} developer with years of experience, your task is to generate highly optimized, production-ready {language} code for the following request:

        {request}

        Your response MUST adhere to the following strict guidelines:

        1. CODE IMPLEMENTATION:
           - Provide a COMPLETE, FULLY FUNCTIONAL implementation that addresses ALL aspects of the request.
           - The code MUST be syntactically correct and follow the latest best practices and conventions for {language}.
           - Include ALL necessary imports, function definitions, classes, and main execution blocks.
           - Implement proper error handling and edge case management.
           - Ensure the code is optimized for performance and memory efficiency.
           - Use appropriate data structures and algorithms to solve the problem efficiently.
           - Follow SOLID principles and implement clean, maintainable code.
           - Add clear, concise comments to explain complex logic or algorithms.
           - Implement proper input validation and data sanitization where necessary.
           - Use meaningful variable and function names that clearly convey their purpose.
           - Adhere to the language-specific style guide (e.g., PEP 8 for Python, Google Style Guide for Java).

        2. COMPREHENSIVE EXPLANATION:
           - Provide an in-depth, technical explanation of the code in English.
           - Cover the following aspects in detail:
             a) Overall architecture and design patterns used in the solution
             b) Detailed explanation of each major component, class, or function
             c) Time and space complexity analysis of key algorithms
             d) Justification for chosen data structures and their impact on performance
             e) Explanation of any advanced language features or libraries used
             f) Discussion of potential edge cases and how they are handled
             g) Scalability considerations and potential optimizations for larger datasets
             h) Any important design decisions or trade-offs made, with reasoning
             i) Suggestions for further improvements or alternative approaches
           - The explanation should be clear, concise, and technically accurate, suitable for an experienced developer audience.

        3. TESTING AND QUALITY ASSURANCE:
           - Outline a testing strategy for the implemented solution.
           - Provide example test cases covering various scenarios, including edge cases.
           - Discuss potential integration and performance testing approaches.

        Format your response EXACTLY as follows:

        CODE:
        ```{language}
        [Your complete, production-ready code here]
        ```

        EXPLANATION:
        [Your comprehensive, technical explanation here]

        TESTING:
        [Outline of testing strategy and example test cases]

        Failure to follow these guidelines precisely will result in an incorrect and unusable response. Ensure your code and explanation demonstrate the highest level of expertise and attention to detail.
        """

    def _create_gist(self, language: str, content: str) -> Optional[str]:
        url = "https://api.github.com/gists"
        headers = {
            "Authorization": f"token {self._github_token}",
            "Accept": "application/vnd.github.v3+json",
        }
        file_extension = self._supported_languages.get(language, ".txt")
        data = {
            "description": f"Optimized {language.capitalize()} Solution",
            "public": False,
            "files": {f"solution{file_extension}": {"content": content}},
        }

        try:
            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            return response.json()["html_url"]
        except requests.exceptions.RequestException as e:
            print(f"Error creating Gist: {str(e)}")
            return None

    def process_code_request(self, message: str) -> str:
        parts = message.split(maxsplit=2)
        if len(parts) < 3:
            return "C√°ch s·ª≠ d·ª•ng: /code [ng√¥n ng·ªØ] [y√™u c·∫ßu chi ti·∫øt]"

        language = parts[1].lower()
        request = parts[2]

        if language not in self._supported_languages:
            return f"Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£ l√†: {', '.join(self._supported_languages.keys())}"

        generated_code, explanation = self._generate_code_and_explanation(
            language, request
        )
        gist_url = self._create_gist(language, generated_code)

        translated_explanation = self.translate(explanation)

        if gist_url:
            response = f"ƒê√£ t·∫°o gi·∫£i ph√°p t·ªëi ∆∞u th√†nh c√¥ng! Xem to√†n b·ªô m√£ ngu·ªìn t·∫°i ƒë√¢y: {gist_url}\n\nGi·∫£i th√≠ch chi ti·∫øt:\n{translated_explanation}"
        else:
            response = f"Kh√¥ng th·ªÉ t·∫°o Gist. ƒê√¢y l√† gi·∫£i th√≠ch chi ti·∫øt cho m√£ ngu·ªìn ƒë∆∞·ª£c t·∫°o ra:\n\n{translated_explanation}"

        return response

    def translate(self, text: str) -> str:
        translator = GoogleTranslator(source="en", target="vi")
        max_length = 5000
        parts = [text[i : i + max_length] for i in range(0, len(text), max_length)]
        translated_parts = [translator.translate(part) for part in parts]
        return " ".join(translated_parts)


class WordChainGame:
    def __init__(self):
        self.used_words = set()
        self.is_active = False
        self.current_word = None

        self.ai_prompt = """[SYSTEM: B·∫°n l√† tr√≠ tu·ªá nh√¢n t·∫°o chuy√™n v·ªÅ ng√¥n ng·ªØ v√† tr√≤ ch∆°i n·ªëi t·ª´ ti·∫øng Vi·ªát. Nhi·ªám v·ª• c·ªßa b·∫°n l√†:

1. KI·ªÇM TRA T√çNH H·ª¢P L·ªÜ C·ª¶A T·ª™ NG∆Ø·ªúI CH∆†I:
- Ph√¢n t√≠ch xem c·ª•m t·ª´ c√≥ ph·∫£i l√† t·ª´ gh√©p c√≥ nghƒ©a trong ti·∫øng Vi·ªát kh√¥ng
- Ki·ªÉm tra ng·ªØ nghƒ©a v√† c√°ch d√πng ph·ªï bi·∫øn
- ƒê·∫£m b·∫£o kh√¥ng ph·∫£i t·ª´ l√≥ng, ti·∫øng ƒë·ªãa ph∆∞∆°ng ho·∫∑c bi·ªát ng·ªØ
- X√°c ƒë·ªãnh t√≠nh logic v√† m·ªëi li√™n k·∫øt gi·ªØa c√°c t·ª´ trong c·ª•m

2. QUY T·∫ÆC N·ªêI T·ª™ TH√îNG MINH:
- L·∫•y t·ª´ cu·ªëi c·ªßa ng∆∞·ªùi ch∆°i l√†m t·ª´ ƒë·∫ßu trong c·ª•m t·ª´ m·ªõi
- T·∫°o t·ª´ gh√©p c√≥ nghƒ©a r√µ r√†ng, ph·ªï bi·∫øn trong ti·∫øng Vi·ªát
- ∆Øu ti√™n c√°c t·ª´ gh√©p:
  + C√≥ t√≠nh k·∫øt n·ªëi cao (d·ªÖ n·ªëi ti·∫øp)
  + Thu·ªôc nhi·ªÅu lƒ©nh v·ª±c kh√°c nhau (ƒëa d·∫°ng ch·ªß ƒë·ªÅ)
  + T·∫°o s·ª± th√∫ v·ªã v√† th√°ch th·ª©c cho ng∆∞·ªùi ch∆°i

3. PH√ÇN T√çCH V√Ä PH·∫¢N H·ªíI:
N·∫øu t·ª´ ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá, tr·∫£ v·ªÅ: "INVALID: l√Ω do"
N·∫øu t·ª´ h·ª£p l·ªá, tr·∫£ v·ªÅ t·ª´ gh√©p m·ªõi theo format: "VALID: t·ª´_gh√©p_m·ªõi"

V√ç D·ª§ CHU·∫®N:
Ng∆∞·ªùi: "con ng∆∞·ªùi" (h·ª£p l·ªá) -> "VALID: ng∆∞·ªùi d√¢n"
Ng∆∞·ªùi: "d√¢n t√¨nh" (h·ª£p l·ªá) -> "VALID: t√¨nh c·∫£m"
Ng∆∞·ªùi: "c·∫£m x√∫c" (h·ª£p l·ªá) -> "VALID: x√∫c ƒë·ªông"
Ng∆∞·ªùi: "con ng·ª´i" (kh√¥ng h·ª£p l·ªá) -> "INVALID: t·ª´ vi·∫øt sai ch√≠nh t·∫£"
Ng∆∞·ªùi: "xyz abc" (kh√¥ng h·ª£p l·ªá) -> "INVALID: kh√¥ng ph·∫£i t·ª´ gh√©p c√≥ nghƒ©a"

4. KI·ªÇM TRA TR√ôNG L·∫∂P:
- T·ª´ ƒë√£ s·ª≠ d·ª•ng: {used_words}
- KH√îNG ƒë∆∞·ª£c d√πng l·∫°i b·∫•t k·ª≥ t·ª´ n√†o trong danh s√°ch

T·ª´ hi·ªán t·∫°i c·∫ßn x·ª≠ l√Ω: "{current_word}"

OUTPUT FORMAT:
- N·∫øu h·ª£p l·ªá: VALID: t·ª´_gh√©p_m·ªõi
- N·∫øu kh√¥ng h·ª£p l·ªá: INVALID: l√Ω_do]"""

    def make_move(self, word, gemini_response):
        word = word.lower().strip()

        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë·∫ßu h√†ng
        if word in ["ƒë·∫ßu h√†ng", "ch·ªãu thua", "thua"]:
            # T·∫°o t·ª´ m·ªõi cho l∆∞·ª£t ch∆°i m·ªõi
            new_word = self.generate_new_word(gemini_response)
            self.is_active = True
            self.used_words.clear()
            self.current_word = new_word
            return (
                f"üéØ K·∫øt th√∫c l∆∞·ª£t ch∆°i tr∆∞·ªõc!\nüéÆ B·∫Øt ƒë·∫ßu l∆∞·ª£t m·ªõi v·ªõi t·ª´: {new_word}"
            )

        # Ki·ªÉm tra y√™u c·∫ßu gi·∫£i th√≠ch
        if word.startswith("gi·∫£i th√≠ch "):
            word_to_explain = word.replace("gi·∫£i th√≠ch ", "", 1).strip()
            if (
                word_to_explain in self.used_words
                or word_to_explain == self.current_word
            ):
                explanation_prompt = f"Gi·∫£i th√≠ch ng·∫Øn g·ªçn √Ω nghƒ©a v√† c√°ch d√πng c·ªßa t·ª´ '{word_to_explain}' trong 2-3 c√¢u"
                explanation = gemini_response(explanation_prompt).strip()
                return f"üí° {explanation}\n\nT·ª´ cu·ªëi ƒë·ªÉ n·ªëi ti·∫øp: '{self.current_word.split()[-1]}'"
            else:
                return (
                    f"‚ùå T·ª´ '{word_to_explain}' ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng trong l∆∞·ª£t ch∆°i n√†y"
                )

        # X·ª≠ l√Ω n·ªëi t·ª´ b√¨nh th∆∞·ªùng
        if not self.is_active:
            self.is_active = True
            self.used_words.clear()

            prompt = self.ai_prompt.format(
                current_word=word, used_words=list(self.used_words)
            )
            response = gemini_response(prompt).strip()

            if response.startswith("INVALID:"):
                self.is_active = False
                return f"‚ùå {response.replace('INVALID:', 'T·ª´ kh√¥ng h·ª£p l·ªá:')}\nüí° Vui l√≤ng /noitu + t·ª´ gh√©p c√≥ nghƒ©a kh√°c"

            bot_word = response.replace("VALID:", "").strip()
            self.used_words.add(word)
            self.used_words.add(bot_word)
            self.current_word = bot_word
            return f"üéÆ B·∫Øt ƒë·∫ßu n·ªëi t·ª´!\nB·∫°n: {word}\nü§ñ Bot: {bot_word}"

        if word in self.used_words:
            return f"‚ùå '{word}' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!\nüìù C√°c t·ª´ ƒë√£ d√πng: {', '.join(self.used_words)}\nüèÜ Bot th·∫Øng!\n\nD√πng /noitu + t·ª´ m·ªõi ƒë·ªÉ ch∆°i l·∫°i!"

        last_word = self.current_word.split()[-1]
        if not word.startswith(last_word):
            return f"‚ùå T·ª´ m·ªõi ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng '{last_word}'\nüí° T·ª´ tr∆∞·ªõc ƒë√≥: {self.current_word}"

        prompt = self.ai_prompt.format(
            current_word=word, used_words=list(self.used_words)
        )

        response = gemini_response(prompt).strip()

        if response.startswith("INVALID:"):
            return f"‚ùå {response.replace('INVALID:', 'T·ª´ kh√¥ng h·ª£p l·ªá:')}\nüí° H√£y d√πng t·ª´ gh√©p c√≥ nghƒ©a kh√°c"

        bot_word = response.replace("VALID:", "").strip()
        if not bot_word or bot_word in self.used_words:
            return f"üéâ B·∫°n th·∫Øng! Bot kh√¥ng t√¨m ƒë∆∞·ª£c t·ª´ ph√π h·ª£p.\nüìù C√°c t·ª´ ƒë√£ d√πng: {', '.join(self.used_words)}\n\nD√πng /noitu + t·ª´ m·ªõi ƒë·ªÉ ch∆°i l·∫°i!"

        self.used_words.add(word)
        self.used_words.add(bot_word)
        self.current_word = bot_word
        return f"ü§ñ Bot: {bot_word}"

    def generate_new_word(self, gemini_response):
        """T·∫°o t·ª´ gh√©p m·ªõi ng·∫´u nhi√™n cho l∆∞·ª£t ch∆°i m·ªõi"""
        prompt = """H√£y t·∫°o m·ªôt t·ª´ gh√©p ti·∫øng Vi·ªát c√≥ nghƒ©a v√† ph·ªï bi·∫øn (v√≠ d·ª•: con ng∆∞·ªùi, nh√† c·ª≠a, h·ªçc sinh).

        Y√™u c·∫ßu:
        - Ch·ªâ tr·∫£ v·ªÅ t·ª´ gh√©p d·∫°ng text thu·∫ßn, kh√¥ng k√®m bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c hay k√Ω t·ª± ƒë·∫∑c bi·ªát
        - Kh√¥ng th√™m d·∫•u c√¢u hay ƒë·ªãnh d·∫°ng
        - Kh√¥ng gi·∫£i th√≠ch hay b·ªï sung th√¥ng tin
        - Ch·ªâ tr·∫£ v·ªÅ 2 t·ª´ ƒë∆°n gh√©p l·∫°i th√†nh t·ª´ gh√©p c√≥ nghƒ©a"""

        response = gemini_response(prompt).strip()
        return response.lower()


class URLTools:
    def __init__(self):
        self.history = []
        self.max_history = 50
        self.temp_dir = "temp_files"

        # T·∫°o th∆∞ m·ª•c temp n·∫øu ch∆∞a c√≥
        if not os.path.exists(self.temp_dir):
            os.makedirs(self.temp_dir)

    def create_short_url(self, long_url):
        """R√∫t g·ªçn link s·ª≠ d·ª•ng TinyURL"""
        try:
            # Ki·ªÉm tra URL h·ª£p l·ªá
            result = urlparse(long_url)
            if not all([result.scheme, result.netloc]):
                return "‚ùå URL kh√¥ng h·ª£p l·ªá! H√£y ƒë·∫£m b·∫£o URL b·∫Øt ƒë·∫ßu v·ªõi http:// ho·∫∑c https://"

            # G·ªçi TinyURL API
            api_url = f"http://tinyurl.com/api-create.php?url={quote_plus(long_url)}"
            response = requests.get(api_url, timeout=10)

            if response.status_code == 200:
                short_url = response.text
                # L∆∞u v√†o l·ªãch s·ª≠
                self.history.append(
                    {
                        "type": "short_url",
                        "original": long_url,
                        "shortened": short_url,
                        "timestamp": datetime.now(),
                    }
                )
                self._trim_history()

                return f"""üîó Link g·ªëc: {long_url}
‚úÇÔ∏è Link r√∫t g·ªçn: {short_url}
üìÖ Th·ªùi gian t·∫°o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

            return "‚ùå Kh√¥ng th·ªÉ r√∫t g·ªçn link. Vui l√≤ng th·ª≠ l·∫°i sau!"

        except requests.Timeout:
            return "‚ùå H·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i!"
        except Exception as e:
            return f"‚ùå L·ªói: {str(e)}"

    def create_qr_code(self, content):
        """T·∫°o QR code"""
        try:
            # T·∫°o t√™n file ƒë·ªôc nh·∫•t trong th∆∞ m·ª•c temp
            filename = os.path.join(
                self.temp_dir,
                f"qr_{hashlib.md5(content.encode()).hexdigest()[:10]}.png",
            )

            # T·∫°o QR v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_H,
                box_size=10,
                border=4,
            )
            qr.add_data(content)
            qr.make(fit=True)

            # T·∫°o v√† l∆∞u ·∫£nh QR
            qr_image = qr.make_image(fill_color="black", back_color="white")
            qr_image.save(filename)

            # L∆∞u l·ªãch s·ª≠
            self.history.append(
                {
                    "type": "qr_code",
                    "content": content,
                    "filename": filename,
                    "timestamp": datetime.now(),
                }
            )
            self._trim_history()

            return filename

        except Exception as e:
            return f"‚ùå L·ªói t·∫°o QR code: {str(e)}"

    def analyze_url(self, url):
        """Ph√¢n t√≠ch URL"""
        try:
            # Parse URL
            parsed = urlparse(url)
            if not all([parsed.scheme, parsed.netloc]):
                return "‚ùå URL kh√¥ng h·ª£p l·ªá!"

            # Ki·ªÉm tra URL
            response = requests.head(url, allow_redirects=True, timeout=5)

            # Ph√¢n t√≠ch th√¥ng tin
            info = {
                "domain": parsed.netloc,
                "path": parsed.path or "/",
                "protocol": parsed.scheme,
                "status": response.status_code,
                "content_type": response.headers.get("content-type", "Kh√¥ng x√°c ƒë·ªãnh"),
                "size": response.headers.get("content-length", "Kh√¥ng x√°c ƒë·ªãnh"),
            }

            # L∆∞u l·ªãch s·ª≠
            self.history.append(
                {
                    "type": "analysis",
                    "url": url,
                    "info": info,
                    "timestamp": datetime.now(),
                }
            )
            self._trim_history()

            return f"""üîç Th√¥ng tin URL:

üåê T√™n mi·ªÅn: {info['domain']}
üìÅ ƒê∆∞·ªùng d·∫´n: {info['path']}
üîí Giao th·ª©c: {info['protocol']}
üìä Tr·∫°ng th√°i: {info['status']}
üìù Lo·∫°i n·ªôi dung: {info['content_type']}
üì¶ K√≠ch th∆∞·ªõc: {info['size']}
‚è∞ Th·ªùi gian ki·ªÉm tra: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

        except requests.Timeout:
            return "‚ùå H·∫øt th·ªùi gian ch·ªù khi ki·ªÉm tra URL!"
        except requests.RequestException:
            return "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi URL!"
        except Exception as e:
            return f"‚ùå L·ªói ph√¢n t√≠ch URL: {str(e)}"

    def get_history(self, limit=5):
        """Xem l·ªãch s·ª≠ thao t√°c"""
        try:
            if not self.history:
                return "üìù Ch∆∞a c√≥ l·ªãch s·ª≠ thao t√°c n√†o!"

            items = self.history[-limit:]

            result = f"üìú {limit} thao t√°c g·∫ßn ƒë√¢y:\n\n"
            for item in reversed(items):
                result += f"‚è∞ {item['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                if item["type"] == "short_url":
                    result += f"üîó R√∫t g·ªçn: {item['original']} -> {item['shortened']}\n"
                elif item["type"] == "qr_code":
                    result += f"üì± QR Code: {item['content']}\n"
                elif item["type"] == "analysis":
                    result += f"üîç Ph√¢n t√≠ch: {item['url']}\n"
                result += "---\n"

            return result

        except Exception as e:
            return f"‚ùå L·ªói l·∫•y l·ªãch s·ª≠: {str(e)}"

    def _trim_history(self):
        """Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc l·ªãch s·ª≠"""
        if len(self.history) > self.max_history:
            self.history = self.history[-self.max_history :]

    def cleanup_temp_files(self):
        """D·ªçn d·∫πp file t·∫°m"""
        try:
            for file in os.listdir(self.temp_dir):
                file_path = os.path.join(self.temp_dir, file)
                if os.path.isfile(file_path):
                    os.remove(file_path)
        except Exception as e:
            print(f"L·ªói d·ªçn d·∫πp file t·∫°m: {str(e)}")


class Voice:
    def __init__(self, bot):
        self.bot = bot
        self.is_active = False
        self.tts = gTTS
        self.temp_dir = "temp_voice"
        self.last_audio = None

        # T·∫°o th∆∞ m·ª•c temp n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(self.temp_dir):
            os.makedirs(self.temp_dir)

    def make_move(self, message):
        """X·ª≠ l√Ω tin nh·∫Øn v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi"""
        message = message.lower().strip()

        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng mu·ªën t·∫Øt voice
        if message in ["t·∫Øt voice", "t·∫Øt", "d·ª´ng", "/endvoice"]:
            self.is_active = False
            self.cleanup_temp_files()
            return "üîá ƒê√£ t·∫Øt ch·∫ø ƒë·ªô voice chat"

        # Kh·ªüi ƒë·ªông voice mode
        if not self.is_active:
            if message == "start":
                self.is_active = True
                return "üéôÔ∏è ƒê√£ b·∫≠t ch·∫ø ƒë·ªô voice chat!\nüí° G·ª≠i tin nh·∫Øn ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi b·∫±ng gi·ªçng n√≥i\n‚ùå G·ª≠i '/endvoice' ƒë·ªÉ t·∫Øt"
            else:
                self.is_active = True
                return self._process_voice_message(message)

        # X·ª≠ l√Ω tin nh·∫Øn trong voice mode
        return self._process_voice_message(message)

    def _process_voice_message(self, message):
        try:
            # L·∫•y ph·∫£n h·ªìi t·ª´ Gemini
            response = send_to_gemini(message)

            # T·∫°o file audio
            audio_path = self._text_to_speech(response)

            if audio_path:
                # L∆∞u ƒë∆∞·ªùng d·∫´n audio cu·ªëi c√πng
                if self.last_audio and os.path.exists(self.last_audio):
                    os.remove(self.last_audio)
                self.last_audio = audio_path

                # G·ª≠i file audio qua bot
                self.bot.send_audio(audio_path)
                return None  # Kh√¥ng tr·∫£ v·ªÅ text message
            else:
                return "‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i"

        except Exception as e:
            return f"‚ùå L·ªói x·ª≠ l√Ω voice: {str(e)}"

    def _text_to_speech(self, text):
        """Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh file √¢m thanh"""
        try:
            # T·∫°o t√™n file duy nh·∫•t
            timestamp = int(time.time())
            audio_file = os.path.join(self.temp_dir, f"voice_{timestamp}.mp3")

            # Chuy·ªÉn ƒë·ªïi text th√†nh speech
            tts = self.tts(text=text, lang="vi")
            tts.save(audio_file)

            return audio_file

        except Exception as e:
            print(error_color(f"L·ªói chuy·ªÉn ƒë·ªïi text to speech: {str(e)}"))
            return None

    def cleanup_temp_files(self):
        """D·ªçn d·∫πp c√°c file t·∫°m"""
        try:
            for file in os.listdir(self.temp_dir):
                file_path = os.path.join(self.temp_dir, file)
                try:
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                except Exception as e:
                    print(warning_color(f"Kh√¥ng th·ªÉ x√≥a file {file_path}: {str(e)}"))
        except Exception as e:
            print(error_color(f"L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c temp: {str(e)}"))


class MesChat(Sender):  # h√†m x·ª≠ l√Ω n√¢ng cao
    def __init__(self, email_or_phone, password, group_or_chat):  # gemini_api_key
        super().__init__(email_or_phone, password, group_or_chat)
        self.image_counter = 0
        self.last_image_path = None
        self.is_running = True
        self.is_listening = True
        self.memory_summary = {}
        self.message_counter = 0
        self.MAX_MESSAGE_LENGTH = 2000
        self.current_language = "vi"
        self.conversation_history = []
        self.unsplash_access_key = ""
        self.github_token = ""
        self.max_history_length = 100
        self.longterm_memory_file = "longterm_memory.json"
        self.max_memory_size = 10000  # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tin nh·∫Øn l∆∞u tr·ªØ
        self.start_time = datetime.now()
        self.code_handler = CodeAssistant()
        self.fact_interval = 15  # th·ªùi gian cho m·ªói fact
        self.fact_apis = [
            self.get_useless_fact,
            self.get_number_fact,
            self.get_cat_fact,
            self.get_dog_fact,
            self.get_today_in_history,
        ]
        self.used_facts = deque(maxlen=50)
        self.word_game = WordChainGame()  # siuu

    def new_message_listen(self):
        if self.his_inp != self.current_inp:
            self.his_inp = self.current_inp
            return self.current_inp
        else:
            return None

    def search_and_send_image(self, query: str):
        """T√¨m ki·∫øm v√† t·∫°o gallery ·∫£nh tr√™n Telegra.ph v·ªõi s·ªë l∆∞·ª£ng c·ªë ƒë·ªãnh 20 ·∫£nh"""
        try:
            self.send_message(
                self.translate_message(f"üîç ƒêang t√¨m ·∫£nh cho '{query}'...")
            )

            # Request th√™m ·∫£nh ƒë·ªÉ lÔøΩÔøΩÔøΩc (30 ·∫£nh)
            encoded_query = quote_plus(query)

            try:
                unsplash_url = f"https://api.unsplash.com/photos/random?query={encoded_query}&count=30&client_id={self.unsplash_access_key}&orientation=landscape"
                response = requests.get(unsplash_url)
                response.raise_for_status()

                if not isinstance(response.json(), list):
                    raise ValueError("Invalid response format")

                # L·ªçc ·∫£nh tr√πng l·∫∑p
                seen_urls = set()
                image_urls = []

                for photo in response.json():
                    if "urls" in photo and "regular" in photo["urls"]:
                        url = photo["urls"]["regular"]
                        if url not in seen_urls:
                            seen_urls.add(url)
                            image_urls.append(
                                {
                                    "url": url,
                                    "photographer": photo["user"]["name"],
                                    "likes": photo.get("likes", 0),
                                }
                            )

                if len(image_urls) < 20:
                    self.send_message(
                        self.translate_message(
                            f"‚ùå Kh√¥ng t√¨m ƒë·ªß ·∫£nh cho '{query}'. Vui l√≤ng th·ª≠ t·ª´ kh√≥a kh√°c."
                        )
                    )
                    return

                # S·∫Øp x·∫øp theo l∆∞·ª£t th√≠ch v√† l·∫•y 20 ·∫£nh
                image_urls.sort(key=lambda x: x["likes"], reverse=True)
                image_urls = image_urls[:20]

                # T·∫°o gallery
                telegraph_content = [{"tag": "h3", "children": [f"Gallery: {query}"]}]

                for idx, img in enumerate(image_urls, 1):
                    telegraph_content.extend(
                        [
                            {
                                "tag": "figure",
                                "children": [
                                    {"tag": "img", "attrs": {"src": img["url"]}},
                                    {
                                        "tag": "figcaption",
                                        "children": [
                                            f"#{idx} - Photo by: {img['photographer']}"
                                        ],
                                    },
                                ],
                            }
                        ]
                    )

                # Upload l√™n Telegra.ph
                telegraph_response = requests.post(
                    "https://api.telegra.ph/createPage",
                    json={
                        "access_token": "",
                        "title": f"Gallery: {query}",
                        "author_name": "Loki Bot",
                        "content": telegraph_content,
                    },
                )

                if (
                    telegraph_response.status_code == 200
                    and telegraph_response.json().get("ok")
                ):
                    gallery_url = telegraph_response.json()["result"]["url"]
                    self.send_message(gallery_url)
                else:
                    self.send_message(
                        self.translate_message(
                            "‚ùå Kh√¥ng th·ªÉ t·∫°o gallery. Vui l√≤ng th·ª≠ l·∫°i sau."
                        )
                    )

            except Exception as e:
                print(error_color(f"[!] L·ªói Unsplash API: {str(e)}"))
                self.send_message(
                    self.translate_message(
                        "‚ùå Kh√¥ng th·ªÉ t√¨m ki·∫øm ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau."
                    )
                )

        except Exception as e:
            print(error_color(f"[!] L·ªói khi t·∫°o gallery: {str(e)}"))
            self.send_message(
                self.translate_message("‚ùå ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.")
            )

    def handle_image_command(self, message):
        """X·ª≠ l√Ω l·ªánh /image v·ªõi query c√≥ th·ªÉ ch·ª©a nhi·ªÅu t·ª´"""
        try:
            parts = message.split(maxsplit=1)
            if len(parts) < 2:
                self.send_message(
                    self.translate_message(
                        "üìù C√∫ ph√°p: /image [ch·ªß ƒë·ªÅ (1-4 t·ª´)]\n"
                        "V√≠ d·ª•:\n"
                        "/image shiba\n"
                        "/image cute shiba inu\n"
                        "/image beautiful landscape nature photography"
                    )
                )
                return

            # L·∫•y query v√† ki·ªÉm tra s·ªë t·ª´
            query = parts[1].strip()
            word_count = len(query.split())

            if not query:
                self.send_message(
                    self.translate_message("‚ùå Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ c·∫ßn t√¨m")
                )
                return

            if word_count > 4:
                self.send_message(
                    self.translate_message("‚ùå Ch·ªß ƒë·ªÅ t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c qu√° 4 t·ª´")
                )
                return

            # G·ªçi h√†m search v·ªõi query ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
            self.search_and_send_image(query=query)

        except Exception as e:
            print(error_color(f"[!] L·ªói x·ª≠ l√Ω l·ªánh /image: {str(e)}"))
            self.send_message(
                self.translate_message("‚ùå ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.")
            )

    def cleanup_image_directory(self, directory, max_images=50):
        """Gi·ªØ s·ªë l∆∞·ª£ng ·∫£nh trong th∆∞ m·ª•c trong gi·ªõi h·∫°n cho ph√©p"""
        try:
            # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c file ·∫£nh
            images = [
                f
                for f in os.listdir(directory)
                if f.lower().endswith((".png", ".jpg", ".jpeg", ".gif"))
            ]

            # S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t tr∆∞·ªõc)
            images.sort(
                key=lambda x: os.path.getctime(os.path.join(directory, x)), reverse=True
            )

            # X√≥a c√°c ·∫£nh c≈© n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n
            if len(images) > max_images:
                for old_image in images[max_images:]:
                    try:
                        os.remove(os.path.join(directory, old_image))
                    except Exception as e:
                        print(
                            warning_color(
                                f"[!] Kh√¥ng th·ªÉ x√≥a ·∫£nh c≈© {old_image}: {str(e)}"
                            )
                        )
        except Exception as e:
            print(error_color(f"[!] L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c ·∫£nh: {str(e)}"))

    def search_recipe(self, query):
        # Th√™m cache ƒë·ªÉ l∆∞u c√°c c√¥ng th·ª©c ƒë√£ t√¨m ki·∫øm
        if not hasattr(self, "recipe_cache"):
            self.recipe_cache = {}

        cache_key = hashlib.md5(query.encode()).hexdigest()
        if cache_key in self.recipe_cache:
            return self.recipe_cache[cache_key]

        api_key = ""  # Thay th·∫ø b·∫±ng API key c·ªßa b·∫°n
        base_url = "https://api.spoonacular.com/recipes/complexSearch"

        params = {
            "apiKey": api_key,
            "query": query,
            "number": 1,
            "addRecipeInformation": True,
            "fillIngredients": True,
            "instructionsRequired": True,
            "includeNutrition": False,
            "language": "en",  # Ch·ªâ ƒë·ªãnh ti·∫øng Anh ƒë·ªÉ c√≥ k·∫øt qu·∫£ nh·∫•t qu√°n
        }

        try:
            self.send_message(
                self.translate_message(f"ƒêang t√¨m ki·∫øm c√¥ng th·ª©c cho '{query}'...")
            )
            response = requests.get(base_url, params=params)
            response.raise_for_status()
            data = response.json()

            if not data.get("results"):
                self.send_message(
                    self.translate_message(
                        f"Xin l·ªói, kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c n√†o cho '{query}'. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c."
                    )
                )
                return

            recipe = data["results"][0]
            title = recipe.get("title", "Unknown Recipe")
            ingredients = recipe.get("extendedIngredients", [])
            instructions = recipe.get("analyzedInstructions", [{}])[0].get("steps", [])

            if not ingredients or not instructions:
                self.send_message(
                    self.translate_message(
                        f"Xin l·ªói, kh√¥ng t√¨m th·∫•y ƒë·ªß th√¥ng tin cho c√¥ng th·ª©c '{query}'."
                    )
                )
                return

            # ƒê·ªãnh d·∫°ng th√¥ng tin c√¥ng th·ª©c
            message = self.translate_message(f"üç≥ C√¥ng th·ª©c cho {title}:\n\n")
            message += self.translate_message("üìã Nguy√™n li·ªáu:\n")
            for ingredient in ingredients:
                message += self.translate_message(f"‚Ä¢ {ingredient['original']}\n")

            message += self.translate_message("\nüë®‚Äçüç≥ H∆∞·ªõng d·∫´n:\n")
            for i, step in enumerate(instructions, 1):
                message += self.translate_message(f"{i}. {step['step']}\n")

            message += self.translate_message(
                f"\nüîó Xem th√™m chi ti·∫øt t·∫°i: {recipe['sourceUrl']}"
            )

            self.send_message(message)
        except requests.exceptions.RequestException as e:
            error_message = f"C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm c√¥ng th·ª©c: {str(e)}"
            self.send_message(self.translate_message(error_message))
        except Exception as e:
            error_message = f"C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra: {str(e)}"
            self.send_message(self.translate_message(error_message))
            print(f"Debug - Chi ti·∫øt l·ªói: {e}")  # Th√™m d√≤ng n√†y ƒë·ªÉ g·ª° l·ªói

        self.recipe_cache[cache_key] = recipe_data
        return recipe_data

    def handle_recipe_command(self, message):
        parts = message.split(maxsplit=1)
        if len(parts) < 2:
            self.send_message(
                self.translate_message("C√°ch s·ª≠ d·ª•ng: /recipe [t√™n m√≥n ƒÉn]")
            )
            self.send_message(
                self.translate_message("V√≠ d·ª•: /recipe spaghetti carbonara")
            )
            return

        query = parts[1]
        self.search_recipe(query)

    def handle_new_message(self, message):
        print(system_color(f"Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn m·ªõi: {message}"))

        if self.word_game.is_active:
            if message.lower() == "/stopnoitu":
                self.word_game.is_active = False
                self.word_game.used_words.clear()
                self.send_message("üèÅ ƒê√£ d·ª´ng tr√≤ ch∆°i n·ªëi t·ª´!")
                return

            # N·∫øu kh√¥ng ph·∫£i l·ªánh d·ª´ng v√† game ƒëang ch·∫°y, x·ª≠ l√Ω nh∆∞ tin nh·∫Øn n·ªëi t·ª´
            if not message.startswith("/"):
                response = self.word_game.make_move(
                    message, lambda prompt: send_to_gemini(prompt)
                )
                self.send_message(response)
                return

        # X·ª≠ l√Ω l·ªánh b·∫Øt ƒë·∫ßu n·ªëi t·ª´
        if message.lower().startswith("/noitu"):
            parts = message.split(maxsplit=1)
            if len(parts) > 1:
                response = self.word_game.make_move(
                    parts[1], lambda prompt: send_to_gemini(prompt)
                )
                self.send_message(response)
                return
            else:
                self.send_message("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ sau l·ªánh /noitu")
                return

        if hasattr(self, "voice_handler") and self.voice_handler.is_active:
            response = self.voice_handler.make_move(message)
            if response:  # Ch·ªâ g·ª≠i text n·∫øu c√≥ l·ªói ho·∫∑c th√¥ng b√°o h·ªá th·ªëng
                self.send_message(response)
            return

        # X·ª≠ l√Ω l·ªánh /voice
        if message.startswith("/voice"):
            if not hasattr(self, "voice_handler"):
                self.voice_handler = Voice(self)

            # T√°ch n·ªôi dung sau l·ªánh /voice n·∫øu c√≥
            parts = message.split(maxsplit=1)
            if len(parts) > 1:
                response = self.voice_handler.make_move(parts[1])
            else:
                response = self.voice_handler.make_move("start")

            if response:  # Ch·ªâ g·ª≠i text n·∫øu c√≥ ph·∫£n h·ªìi
                self.send_message(response)
            return

        # Th√™m ƒëo·∫°n ki·ªÉm tra v√† t·∫°o file n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists("conversation_history.json"):
            with open("conversation_history.json", "w", encoding="utf-8") as f:
                json.dump([], f, ensure_ascii=False, indent=2)
            print(info_color("[*] ƒê√£ t·∫°o file conversation_history.json"))

        # Ch·ªâ l∆∞u tin nh·∫Øn kh√¥ng ph·∫£i l·ªánh
        if message and message.strip() and not message.startswith("/"):
            self.conversation_history.append({"role": "user", "content": message})
            self.save_conversation_history()
            self.save_to_longterm_memory("user", message)
            print(info_color("[*] ƒê√£ l∆∞u tin nh·∫Øn v√†o conversation_history.json"))

        if "/loki" in message.lower():
            self.send_random_dog_image()
            return

        elif message.lower().startswith("/code"):
            code_assistant = CodeAssistant()
            response = code_assistant.process_code_request(message)
            self.send_message(self.translate_message(response))
            return

        if message.lower().startswith("/language"):
            self.change_language(message)
            return

        elif message.startswith(("/short", "/qr", "/analyze", "/urlhistory")):
            self.handle_url_tools(message)
            return

        elif message.startswith("/image"):
            # Chuy·ªÉn x·ª≠ l√Ω sang h√†m handle_image_command
            self.handle_image_command(message)
            return
        elif message.lower().startswith("/summary"):
            try:

                time_range = "today"
                parts = message.split()
                if len(parts) > 1:
                    time_range = parts[1].lower()

                summary = self.summarize_conversations(time_range)
                self.send_message(summary)
            except Exception as e:
                error_msg = f"L·ªói khi ƒë·ªçc b·ªô nh·ªõ d√†i h·∫°n: {str(e)}"
                print(error_color(f"[!] {error_msg}"))
                self.send_message(self.translate_message(f"‚ö†Ô∏è {error_msg}"))
            return

        elif message.lower() == "/stop":
            self.is_running = False
            self.send_message(
                self.translate_message(
                    "Bot ƒë√£ d·ª´ng ho·∫°t ƒë·ªông. S·ª≠ d·ª•ng l·ªánh /continue ƒë·ªÉ ti·∫øp t·ª•c."
                )
            )
            return
        elif message.lower() == "/continue":
            self.is_running = True
            self.send_message(self.translate_message("Bot ƒë√£ ti·∫øp t·ª•c ho·∫°t ƒë·ªông."))
            return
        elif message.lower() == "/save_history":
            self.save_conversation_history()
            self.send_message(self.translate_message("ƒê√£ l∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán."))
            return
        elif message.lower() == "/load_history":
            self.load_conversation_history()
            self.send_message(self.translate_message("ƒê√£ t·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán."))
            return
        elif message.lower() == "/fact":
            self.fact_mode = True
            self.send_message(
                self.translate_message(
                    "Ch·∫ø ƒë·ªô fact ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t. S·ª≠ d·ª•ng /stopfact ƒë·ªÉ d·ª´ng."
                )
            )
            self.start_fact_loop()
            return

        elif message.lower() == "/stopfact":
            self.fact_mode = False
            self.send_message(self.translate_message("Ch·∫ø ƒë·ªô fact ƒë√£ ƒë∆∞·ª£c d·ª´ng."))
            return
        elif message.lower() == "/guide":
            self.send_guide()
            return

        elif message.lower().startswith("/recipe"):
            self.handle_recipe_command(message)
            return
        elif message.lower() == "/clear":
            try:
                self.conversation_history = []
                if os.path.exists("conversation_history.json"):
                    os.remove("conversation_history.json")
                self.send_message(
                    self.translate_message(
                        "ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán hi·ªán t·∫°i. B·ªô nh·ªõ d√†i h·∫°n v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n."
                    )
                )
            except Exception as e:
                self.send_message(
                    self.translate_message(f"L·ªói khi x√≥a l·ªãch s·ª≠: {str(e)}")
                )
            return
        elif message.lower().startswith("/createimage"):
            parts = message.split(maxsplit=1)
            if len(parts) < 2:
                self.send_message(
                    self.translate_message("Vui l√≤ng cung c·∫•p m√¥ t·∫£ cho ·∫£nh.")
                )
                return

            prompt = parts[1]
            image_path = generate_image_huggingface(prompt)
            self.send_image(image_path, "ƒê√¢y l√† ·∫£nh ƒë∆∞·ª£c t·∫°o t·ª´ AI:")
            os.remove(image_path)

        elif message.lower() == "/help":
            self.send_help_message()
            return

        if not self.is_running:
            return

        self.supported_languages = {
            "vi": "Vietnamese",
            "en": "English",
            "fr": "French",
            "de": "German",
            "es": "Spanish",
            "it": "Italian",
            "pt": "Portuguese",
            "nl": "Dutch",
            "ru": "Russian",
            "ar": "Arabic",
            "hi": "Hindi",
            "ja": "Japanese",
            "ko": "Korean",
            "zh-CN": "Chinese (Simplified)",
            "zh-TW": "Chinese (Traditional)",
            "th": "Thai",
            "id": "Indonesian",
            "ms": "Malay",
            "tr": "Turkish",
            "pl": "Polish",
            "sv": "Swedish",
            "da": "Danish",
            "fi": "Finnish",
        }

        if len(self.conversation_history) > self.max_history_length:
            self.conversation_history = self.conversation_history[
                -self.max_history_length :
            ]

        translated_message = self.translate_to_vietnamese(message)

        image_path = self.new_image_listen(return_file=True)
        if image_path:
            print(system_color(f"Nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh m·ªõi: {image_path}"))
            self.last_image_path = image_path
            gemini_response = send_to_gemini(
                f"H√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr·∫£ l·ªùi c√¢u h·ªèi sau: {translated_message}",
                image_path,
                self.conversation_history,
            )
        else:
            gemini_response = send_to_gemini(
                translated_message, conversation_history=self.conversation_history
            )

        # Ch·ªâ l∆∞u ph·∫£n h·ªìi c·ªßa bot n·∫øu kh√¥ng ph·∫£i l√† ph·∫£n h·ªìi cho l·ªánh
        if not message.startswith("/"):
            try:
                self.save_to_longterm_memory("assistant", gemini_response)
                self.conversation_history.append(
                    {"role": "assistant", "content": gemini_response}
                )
            except Exception as e:
                print(
                    error_color(
                        f"[!] L·ªói khi l∆∞u ph·∫£n h·ªìi v√†o b·ªô nh·ªõ d√†i h·∫°n: {str(e)}"
                    )
                )

        emoji_response = emoji.emojize(gemini_response, language="alias")

        print(success_color(f"Ph·∫£n h·ªìi t·ª´ Gemini: {gemini_response}"))

        translated_response = self.translate_from_vietnamese(gemini_response)
        formatted_response = self.format_message_for_messenger(translated_response)

        if len(formatted_response) > self.MAX_MESSAGE_LENGTH:
            self.send_long_message(formatted_response)
        else:
            self.send_message(formatted_response)

    def handle_url_tools(self, message):
        """X·ª≠ l√Ω c√°c l·ªánh URL Tools"""
        try:
            if not hasattr(self, "url_tools"):
                self.url_tools = URLTools()

            parts = message.split(maxsplit=1)
            command = parts[0].lower()

            if len(parts) < 2 and command not in ["/urlhistory"]:
                return self.send_message(
                    """
                üîó URL Tools - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:

                /short [url] - R√∫t g·ªçn link
                /qr [n·ªôi dung] - T·∫°o m√£ QR
                /analyze [url] - Ph√¢n t√≠ch th√¥ng tin URL
                /urlhistory - Xem l·ªãch s·ª≠ thao t√°c

                V√≠ d·ª•:
                /short https://example.com/very/long/url
                /qr https://example.com
                /analyze https://example.com
                """
                )

            content = parts[1] if len(parts) > 1 else ""

            if command == "/short":
                result = self.url_tools.create_short_url(content)
                self.send_message(result)

            elif command == "/qr":
                qr_file = self.url_tools.create_qr_code(content)
                if not qr_file.startswith("‚ùå"):
                    self.send_message("üîÑ ƒêang t·∫°o m√£ QR...")
                    self.send_image(qr_file)
                    os.remove(qr_file)  # X√≥a file t·∫°m
                else:
                    self.send_message(qr_file)

            elif command == "/analyze":
                result = self.url_tools.analyze_url(content)
                self.send_message(result)

            elif command == "/urlhistory":
                result = self.url_tools.get_history()
                self.send_message(result)

        except Exception as e:
            self.send_message(f"‚ùå L·ªói x·ª≠ l√Ω l·ªánh: {str(e)}")

    def change_language(self, message):
        parts = message.split()
        if len(parts) == 2:
            lang = parts[1].lower()
            if lang in self.supported_languages:
                self.current_language = lang
                # X√≥a cache khi ƒë·ªïi ng√¥n ng·ªØ
                if hasattr(self, "_translation_cache"):
                    self._translation_cache.clear()
                self.send_message(
                    self.translate_message(
                        f"Ng√¥n ng·ªØ ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh {self.supported_languages[lang]}."
                    )
                )
            else:
                supported_langs = "\n".join(
                    [
                        f"- {code}: {name}"
                        for code, name in self.supported_languages.items()
                    ]
                )
                self.send_message(
                    self.translate_message(
                        f"Ng√¥n ng·ªØ kh√¥ng h·ª£p l·ªá. C√°c ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£:\n{supported_langs}"
                    )
                )
        else:
            self.send_message(
                self.translate_message(
                    "L·ªánh kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng /language [m√£ ng√¥n ng·ªØ]."
                )
            )

    def _get_translation_cache(self):
        if not hasattr(self, "_translation_cache"):
            self._translation_cache = {}
        return self._translation_cache

    def _cache_translation(self, source_lang, target_lang, text, translation):
        cache = self._get_translation_cache()
        cache_key = f"{source_lang}:{target_lang}:{text}"
        cache[cache_key] = {"translation": translation, "timestamp": time.time()}

    def _get_cached_translation(self, source_lang, target_lang, text):
        cache = self._get_translation_cache()
        cache_key = f"{source_lang}:{target_lang}:{text}"

        if cache_key in cache:
            # Cache h·∫øt h·∫°n sau 1 gi·ªù
            if time.time() - cache[cache_key]["timestamp"] < 3600:
                return cache[cache_key]["translation"]
            else:
                del cache[cache_key]
        return None

    def translate_with_retry(self, text, source_lang, target_lang, max_retries=3):
        if not text or text.isspace():
            return text

        # Ki·ªÉm tra cache
        cached = self._get_cached_translation(source_lang, target_lang, text)
        if cached:
            return cached

        for attempt in range(max_retries):
            try:
                translator = GoogleTranslator(source=source_lang, target=target_lang)
                translation = translator.translate(text)

                if translation:
                    # L∆∞u v√†o cache
                    self._cache_translation(source_lang, target_lang, text, translation)
                    return translation

            except Exception as e:
                if attempt == max_retries - 1:
                    print(
                        error_color(
                            f"L·ªói d·ªãch ({source_lang}->{target_lang}): {str(e)}"
                        )
                    )
                    return text  # Tr·∫£ v·ªÅ text g·ªëc n·∫øu kh√¥ng d·ªãch ƒë∆∞·ª£c
                time.sleep(1)  # ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i

        return text

    def translate_message(self, message):
        if self.current_language == "vi":
            return message
        return self.translate_with_retry(message, "vi", self.current_language)

    def translate_to_vietnamese(self, message):
        if self.current_language == "vi":
            return message
        return self.translate_with_retry(message, self.current_language, "vi")

    def translate_from_vietnamese(self, message):
        if self.current_language == "vi":
            return message
        return self.translate_with_retry(message, "vi", self.current_language)

    def format_message_for_messenger(self, message):

        code_blocks = re.findall(r"```[\s\S]*?```", message)
        for i, block in enumerate(code_blocks):
            placeholder = f"CODE_BLOCK_{i}"
            message = message.replace(block, placeholder)

        formatted = re.sub(r"\*\*(.*?)\*\*", r"*\1*", message)  # Bold
        formatted = re.sub(r"_(.*?)_", r"_\1_", formatted)  # Italic
        formatted = re.sub(r"`(.*?)`", r'"\1"', formatted)  # Inline code
        formatted = re.sub(r"\[(.*?)\]$$(.*?)$$", r"\1 (\2)", formatted)  # Links

        for i, block in enumerate(code_blocks):
            indented_block = "\n" + "\n".join(
                "    " + line for line in block.strip("`").split("\n")
            )
            formatted = formatted.replace(f"CODE_BLOCK_{i}", indented_block)

        lines = formatted.split("\n")
        for i, line in enumerate(lines):
            if re.match(r"^\d+\.\s", line):
                lines[i] = re.sub(r"^\d+\.\s", "‚Ä¢ ", line)
            elif re.match(r"^[-*]\s", line):
                lines[i] = re.sub(r"^[-*]\s", "‚Ä¢ ", line)

        formatted = "\n".join(lines)

        # Chu·∫©n h√≥a Unicode ƒë·ªÉ tr√°nh l·ªói m√£ h√≥a
        formatted = unicodedata.normalize("NFKC", formatted)
        formatted = emoji.emojize(formatted, language="alias")

        return formatted

    def create_gist(self, content, description="Ph·∫£n h·ªìi d√†i t·ª´ Loki Bot"):
        print(info_color("[*] ƒêang t·∫°o Gist..."))
        url = "https://api.github.com/gists"
        headers = {
            "Authorization": f"token {self.github_token}",
            "Accept": "application/vnd.github.v3+json",
        }
        data = {
            "description": description,
            "public": False,
            "files": {"message.txt": {"content": content}},
        }
        try:
            response = requests.post(url, headers=headers, data=json.dumps(data))
            response.raise_for_status()
            gist_url = response.json()["html_url"]
            print(success_color(f"[*] ƒê√£ t·∫°o Gist th√†nh c√¥ng: {gist_url}"))
            return gist_url
        except requests.exceptions.RequestException as e:
            print(error_color(f"[!] L·ªói khi t·∫°o Gist: {str(e)}"))
            return None

    def send_audio(self, audio_path):
        """G·ª≠i file audio qua messenger"""
        try:
            # T√¨m n√∫t ƒë√≠nh k√®m file
            attach_button = WebDriverWait(self.browser, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'input[type="file"]'))
            )

            # G·ª≠i ƒë∆∞·ªùng d·∫´n file audio
            attach_button.send_keys(os.path.abspath(audio_path))

            # ƒê·ª£i v√† click n√∫t g·ª≠i
            send_button = WebDriverWait(self.browser, 10).until(
                EC.presence_of_element_located(
                    (By.CSS_SELECTOR, 'div[aria-label="G·ª≠i"]')
                )
            )
            send_button.click()

            print(success_color(f"[*] ƒê√£ g·ª≠i file audio: {audio_path}"))

        except Exception as e:
            print(error_color(f"[!] L·ªói g·ª≠i file audio: {str(e)}"))
            self.send_message("‚ùå Kh√¥ng th·ªÉ g·ª≠i file audio")

    def send_long_message(self, message):
        self.message_counter += 1
        print(info_color(f"[*] X·ª≠ l√Ω tin nh·∫Øn d√†i #{self.message_counter}"))

        gist_url = self.create_gist(message)
        if gist_url:
            short_message = self.translate_message(
                f"Ph·∫£n h·ªìi qu√° d√†i. Xem n·ªôi dung ƒë·∫ßy ƒë·ªß t·∫°i ƒë√¢y: {gist_url}"
            )
            self.send_message(short_message)
        else:
            print(
                warning_color("[!] Kh√¥ng th·ªÉ t·∫°o Gist. Chuy·ªÉn sang g·ª≠i nhi·ªÅu tin nh·∫Øn.")
            )
            chunks = [
                message[i : i + self.MAX_MESSAGE_LENGTH]
                for i in range(0, len(message), self.MAX_MESSAGE_LENGTH)
            ]
            for i, chunk in enumerate(chunks, 1):
                chunk_message = self.translate_message(
                    f"Ph·∫ßn {i}/{len(chunks)}:\n\n{chunk}"
                )
                self.send_message(chunk_message)
                time.sleep(1)  # Tr√°nh g·ª≠i qu√° nhanh

    def new_image_listen(self, return_file=False, file_path=None, return_byte=True):
        if self.current_img_value != self.his_img_value:
            self.his_img_value = self.current_img_value
            if return_file:
                if file_path is None:
                    self.image_counter += 1
                    file_path = f"./meschat_img_{self.image_counter}.png"
                img = io.BytesIO(self.current_image)
                img = Image.open(img)
                img.save(file_path)
                return file_path
            elif return_byte:
                return self.current_image
        else:
            return None

    def save_conversation_history(self, filename="conversation_history.json"):
        try:
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(self.conversation_history, f, ensure_ascii=False, indent=2)
            print(success_color(f"[*] ƒê√£ l∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán v√†o {filename}"))
        except Exception as e:
            print(error_color(f"[!] L·ªói khi l∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán: {str(e)}"))

    def load_conversation_history(self, filename="conversation_history.json"):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                self.conversation_history = json.load(f)
            print(success_color(f"ƒê√£ t·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán t·ª´ {filename}"))
        except FileNotFoundError:
            print(error_color(f"Kh√¥ng t√¨m th·∫•y file {filename}"))

    def save_to_longterm_memory(self, role, content):
        """L∆∞u tin nh·∫Øn v√†o b·ªô nh·ªõ d√†i h·∫°n"""
        try:
            # T·∫°o b·∫£n ghi m·ªõi
            memory_entry = {
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "role": role,
                "content": content,
            }

            # ƒê·ªçc file hi·ªán t·∫°i ho·∫∑c t·∫°o list m·ªõi n·∫øu file kh√¥ng t·ªìn t·∫°i
            try:
                with open(self.longterm_memory_file, "r", encoding="utf-8") as f:
                    memories = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                memories = []

            # Th√™m b·∫£n ghi m·ªõi
            memories.append(memory_entry)

            # Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc b·ªô nh·ªõ
            if len(memories) > self.max_memory_size:
                memories = memories[-self.max_memory_size :]

            # L∆∞u v√†o file
            with open(self.longterm_memory_file, "w", encoding="utf-8") as f:
                json.dump(memories, f, ensure_ascii=False, indent=2)

        except Exception as e:
            print(error_color(f"[!] L·ªói khi l∆∞u v√†o b·ªô nh·ªõ d√†i h·∫°n: {str(e)}"))

    def summarize_conversations(self, time_range="today"):
        """T√≥m t·∫Øt cu·ªôc tr√≤ chuy·ªán theo kho·∫£ng th·ªùi gian"""
        try:
            if not os.path.exists(self.longterm_memory_file):
                return self.translate_message("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ t√≥m t·∫Øt.")

            with open(self.longterm_memory_file, "r", encoding="utf-8") as f:
                memories = json.load(f)

            # L·ªçc tin nh·∫Øn theo th·ªùi gian
            now = datetime.now()
            if time_range == "today":
                start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
            elif time_range == "week":
                start_time = now - timedelta(days=7)
            elif time_range == "month":
                start_time = now - timedelta(days=30)
            else:
                start_time = datetime.min

            filtered_messages = []
            for memory in memories:
                try:
                    msg_time = datetime.strptime(
                        memory["timestamp"], "%Y-%m-%d %H:%M:%S"
                    )
                    if msg_time >= start_time:
                        filtered_messages.append(
                            f"{memory['role']}: {memory['content']}"
                        )
                except (ValueError, KeyError):
                    continue

            if not filtered_messages:
                return self.translate_message(
                    f"Kh√¥ng c√≥ tin nh·∫Øn n√†o trong {time_range}"
                )

            # T·∫°o prompt cho Gemini
            prompt = f"""H√£y t√≥m t·∫Øt cu·ªôc trÔøΩÔøΩ chuy·ªán sau m·ªôt c√°ch ng·∫Øn g·ªçn v√† s√∫c t√≠ch:

Th·ªùi gian: {time_range}
S·ªë l∆∞·ª£ng tin nh·∫Øn: {len(filtered_messages)}

N·ªôi dung tr√≤ chuy·ªán:
{chr(10).join(filtered_messages[-50:])}  # Ch·ªâ l·∫•y 50 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh qu√° t·∫£i

Y√™u c·∫ßu t√≥m t·∫Øt:
1. C√°c ch·ªß ƒë·ªÅ ch√≠nh ƒë∆∞·ª£c th·∫£o lu·∫≠n
2. Nh·ªØng ƒëi·ªÉm quan tr·ªçng/quy·∫øt ƒë·ªãnh
3. T√¢m tr·∫°ng/c·∫£m x√∫c chung c·ªßa cu·ªôc tr√≤ chuy·ªán
4. C√°c y√™u c·∫ßu ho·∫∑c v·∫•n ƒë·ªÅ c·∫ßn follow-up

H√£y tr√¨nh b√†y t√≥m t·∫Øt m·ªôt c√°ch s√∫c t√≠ch v√† d·ªÖ ƒë·ªçc."""

            # G·ªçi Gemini ƒë·ªÉ t√≥m t·∫Øt
            summary = send_to_gemini(prompt)

            # L∆∞u t√≥m t·∫Øt
            self.memory_summary[time_range] = {
                "timestamp": now.strftime("%Y-%m-%d %H:%M:%S"),
                "summary": summary,
            }

            return summary

        except Exception as e:
            error_msg = f"L·ªói khi t√≥m t·∫Øt cu·ªôc tr√≤ chuy·ªán: {str(e)}"
            print(error_color(f"[!] {error_msg}"))
            return self.translate_message(f"‚ö†Ô∏è {error_msg}")

    def send_random_dog_image(self):
        def wait_for_upload(seconds=3):
            """ƒê·ª£i ƒë·ªÉ ƒë·∫£m b·∫£o ·∫£nh ƒë∆∞c t·∫£i l√™n ho√†n to√†n"""
            time.sleep(seconds)

        def attempt_send_image(image_path, max_retries=3, base_delay=5):
            """Th·ª≠ g·ª≠i ·∫£nh v·ªõi c∆° ch·∫ø retry"""
            for attempt in range(max_retries):
                try:
                    self.send_image(image_path)
                    wait_for_upload()  # ƒê·ª£i ·∫£nh t·∫£i l√™n ho√†n t·∫•t
                    return True
                except Exception as e:
                    delay = base_delay * (
                        attempt + 1
                    )  # TƒÉng th·ªùi gian ch·ªù sau m·ªói l·∫ßn th·∫•t b·∫°i
                    print(
                        warning_color(
                            f"[!] L·∫ßn th·ª≠ {attempt + 1}/{max_retries} th·∫•t b·∫°i: {str(e)}"
                        )
                    )
                    print(info_color(f"[*] ƒê·ª£i {delay} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i..."))
                    time.sleep(delay)
            return False

        try:
            dog_images_dir = "/content/drive/MyDrive/"
            if not os.path.exists(dog_images_dir):
                self.send_message(
                    self.translate_message("‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ch·ª©a ·∫£nh.")
                )
                return

            # L·ªçc v√† ki·ªÉm tra ·∫£nh h·ª£p l·ªá
            dog_images = [
                f
                for f in os.listdir(dog_images_dir)
                if f.lower().endswith((".png", ".jpg", ".jpeg", ".gif"))
                and os.path.getsize(os.path.join(dog_images_dir, f)) < 10000000
            ]  # Gi·ªõi h·∫°n 10MB

            if not dog_images:
                self.send_message(
                    self.translate_message(
                        "‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh ph√π h·ª£p trong th∆∞ vi·ªán."
                    )
                )
                return

            # Ch·ªçn ·∫£nh ng·∫´u nhi√™n
            num_images = random.randint(5, 10)  # Gi·∫£m s·ªë l∆∞·ª£ng ·∫£nh ƒë·ªÉ ƒë·∫£m b·∫£o ·ªïn ƒë·ªãnh
            selected_images = random.sample(
                dog_images, min(num_images, len(dog_images))
            )
            total_images = len(selected_images)

            # Th√¥ng b√°o b·∫Øt ƒë·∫ßu
            self.send_message(
                self.translate_message(
                    f"üîÑ ƒêang chu·∫©n b·ªã t·∫£i l√™n {total_images} h√¨nh ·∫£nh...\n"
                    f"‚è≥ Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t..."
                )
            )
            wait_for_upload(5)  # ƒê·ª£i th√¥ng b√°o hi·ªÉn th·ªã

            # Theo d√µi ti·∫øn tr√¨nh
            uploaded_count = 0
            failed_uploads = 0

            # T·∫£i l√™n t·ª´ng ·∫£nh
            for index, image in enumerate(selected_images, 1):
                image_path = os.path.join(dog_images_dir, image)

                # Ki·ªÉm tra file t·ªìn t·∫°i v√† c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c
                if not os.path.exists(image_path) or not os.access(image_path, os.R_OK):
                    print(error_color(f"[!] Kh√¥ng th·ªÉ truy c·∫≠p file: {image}"))
                    failed_uploads += 1
                    continue

                print(info_color(f"[*] ƒêang x·ª≠ l√Ω ·∫£nh {index}/{total_images}: {image}"))

                if attempt_send_image(image_path):
                    uploaded_count += 1
                    print(success_color(f"[*] T·∫£i l√™n th√†nh c√¥ng: {image}"))
                else:
                    failed_uploads += 1
                    print(
                        error_color(f"[!] Kh√¥ng th·ªÉ t·∫£i l√™n sau nhi·ªÅu l·∫ßn th·ª≠: {image}")
                    )

                # ƒê·ª£i gi·ªØa c√°c l·∫ßn t·∫£i ƒë·ªÉ tr√°nh qu√° t·∫£i
                wait_for_upload(7)  # TƒÉng th·ªùi gian ch·ªù gi·ªØa c√°c ·∫£nh

            # G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
            if failed_uploads == 0:
                final_message = self.translate_message(
                    f"‚úÖ Ho√†n th√†nh!\n"
                    f"üì§ ƒê√£ t·∫£i l√™n th√†nh c√¥ng {uploaded_count}/{total_images} ·∫£nh."
                )
            else:
                final_message = self.translate_message(
                    f"‚ö†Ô∏è ƒê√£ ho√†n th√†nh v·ªõi m·ªôt s·ªë l·ªói:\n"
                    f"‚úÖ Th√†nh c√¥ng: {uploaded_count} ·∫£nh\n"
                    f"‚ùå Th·∫•t b·∫°i: {failed_uploads} ·∫£nh"
                )

            wait_for_upload(5)  # ƒê·ª£i t·∫•t c·∫£ ·∫£nh hi·ªÉn th·ªã
            self.send_message(final_message)

        except Exception as e:
            error_message = f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {str(e)}"
            print(error_color(f"[!] {error_message}"))
            self.send_message(self.translate_message(error_message))

    def get_useless_fact(self):  # fact ƒë·ªß th·ª©
        try:
            response = requests.get(
                "https://uselessfacts.jsph.pl/random.json?language=en"
            )
            response.raise_for_status()
            return response.json()["text"]
        except requests.RequestException:
            return None

    def get_number_fact(self):
        try:
            response = requests.get("http://numbersapi.com/random/trivia")
            response.raise_for_status()
            return response.text
        except requests.RequestException:
            return None

    def get_cat_fact(self):
        try:
            response = requests.get("https://catfact.ninja/fact")
            response.raise_for_status()
            return response.json()["fact"]
        except requests.RequestException:
            return None

    def get_dog_fact(self):
        try:
            response = requests.get("https://dog-api.kinduff.com/api/facts")
            response.raise_for_status()
            return response.json()["facts"][0]
        except requests.RequestException:
            return None

    def get_today_in_history(self):
        try:
            today = datetime.now()
            response = requests.get(
                f"https://history.muffinlabs.com/date/{today.month}/{today.day}"
            )
            response.raise_for_status()
            events = response.json()["data"]["Events"]
            event = random.choice(events)
            return f"On this day in {event['year']}: {event['text']}"
        except (requests.RequestException, KeyError, IndexError):
            return None

    def get_random_fact(self):
        while True:
            fact_function = random.choice(self.fact_apis)
            fact = fact_function()
            if fact and fact not in self.used_facts:
                self.used_facts.append(fact)
                return fact

    def translate_and_format_fact(self, fact):
        # Translate to Vietnamese
        fact_in_vietnamese = GoogleTranslator(source="en", target="vi").translate(fact)

        # Translate to the current language if it's not Vietnamese
        if self.current_language != "vi":
            translated_fact = GoogleTranslator(
                source="vi", target=self.current_language
            ).translate(fact_in_vietnamese)
        else:
            translated_fact = fact_in_vietnamese

        return f"Fact th√∫ v·ªã: {translated_fact}"

    def send_random_fact(self):
        if self.fact_mode:
            fact = self.get_random_fact()
            if fact:
                formatted_fact = self.translate_and_format_fact(fact)
                self.send_message(formatted_fact)
            else:
                self.send_message(
                    self.translate_message(
                        "Xin l·ªói, kh√¥ng th·ªÉ l·∫•y fact l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau."
                    )
                )

    def start_fact_loop(self):
        if self.fact_mode:
            self.send_random_fact()
            threading.Timer(self.fact_interval, self.start_fact_loop).start()

    def clear_bot_data(self):
        try:
            # X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán
            self.conversation_history = []

            # ƒê·∫∑t l·∫°i c√°c bi·∫øn ƒë·∫øm
            self.image_counter = 0
            self.message_counter = 0

            # X√≥a c√°c file ·∫£nh t·∫°m th·ªùi v√† d·ªçn d·∫πp th∆∞ m·ª•c ·∫£nh
            self.cleanup_images()

            # ƒê·∫∑t l·∫°i ng√¥n ng·ªØ v·ªÅ m·∫∑c ƒë·ªãnh
            previous_language = self.current_language
            self.current_language = "vi"

            # X√≥a cache d·ªãch thu·∫≠t
            if hasattr(self, "_translation_cache"):
                self._translation_cache.clear()

            # ƒê·∫∑t l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
            self.start_time = datetime.now()

            # X√≥a file l·ªãch s·ª≠ tr√≤ chuy·ªán
            if os.path.exists("conversation_history.json"):
                os.remove("conversation_history.json")

            # G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
            if previous_language != "vi":
                self.send_message(
                    "‚ú® ƒê√£ d·ªçn d·∫πp xong!\n"
                    + f"üîÑ Chuy·ªÉn ng√¥n ng·ªØ t·ª´ {self.supported_languages.get(previous_language, previous_language)} "
                    + "v·ªÅ Ti·∫øng Vi·ªát\n"
                    + "ü§ñ Bot ƒë√£ s·∫µn s√†ng ph·ª•c v·ª•!"
                )
            else:
                self.send_message("‚ú® ƒê√£ d·ªçn d·∫πp xong!\nü§ñ Bot ƒë√£ s·∫µn s√†ng ph·ª•c v·ª•!")

        except Exception as e:
            error_msg = f"‚ùå L·ªói khi d·ªçn d·∫πp: {str(e)}"
            print(error_color(f"[!] {error_msg}"))
            self.send_message(self.translate_message(error_msg))

    def cleanup_images(self):
        """D·ªçn d·∫πp t·∫•t c·∫£ c√°c th∆∞ m·ª•c ·∫£nh v√† file ·∫£nh t·∫°m th·ªùi"""
        try:
            # D·ªçn d·∫πp th∆∞ m·ª•c ·∫£nh t·∫£i v·ªÅ
            image_dir = "downloaded_images"
            if os.path.exists(image_dir):
                # Gi·ªØ l·∫°i 50 ·∫£nh g·∫ßn nh·∫•t
                images = [
                    f
                    for f in os.listdir(image_dir)
                    if f.lower().endswith((".png", ".jpg", ".jpeg", ".gif"))
                ]
                images.sort(
                    key=lambda x: os.path.getctime(os.path.join(image_dir, x)),
                    reverse=True,
                )

                # X√≥a c√°c ·∫£nh c≈©
                for old_image in images[50:]:
                    try:
                        os.remove(os.path.join(image_dir, old_image))
                        print(info_color(f"[*] ƒê√£ x√≥a ·∫£nh c≈©: {old_image}"))
                    except Exception as e:
                        print(warning_color(f"[!] Kh√¥ng th·ªÉ x√≥a {old_image}: {str(e)}"))

            # X√≥a c√°c file ·∫£nh t·∫°m th·ªùi
            temp_patterns = [
                "meschat_img_*.png",
                "optimized_*.jpg",
                "generated_image.jpg",
                "temp_image.jpg",
            ]

            for pattern in temp_patterns:
                for file in glob.glob(pattern):
                    try:
                        os.remove(file)
                        print(info_color(f"[*] ƒê√£ x√≥a file t·∫°m: {file}"))
                    except Exception as e:
                        print(warning_color(f"[!] Kh√¥ng th·ªÉ x√≥a {file}: {str(e)}"))

            # ƒê·∫∑t l·∫°i ƒë∆∞·ªùng d·∫´n ·∫£nh cu·ªëi
            self.last_image_path = None

            print(success_color("[*] Ho√†n th√†nh d·ªçn d·∫πp ·∫£nh"))

        except Exception as e:
            print(error_color(f"[!] L·ªói khi d·ªçn d·∫πp ·∫£nh: {str(e)}"))

    def clear_temporary_images(self):
        # X√≥a t·∫•t c·∫£ c√°c file ·∫£nh t·∫°m th·ªùi
        for file in os.listdir():
            if file.startswith("meschat_img_") and file.endswith(".png"):
                os.remove(file)

        self.last_image_path = None

    def handle_image(self, img_path):
        try:
            # T·∫°o t√™n file t·∫°m th·ªùi duy nh·∫•t
            temp_filename = f"optimized_{int(time.time())}_{os.path.basename(img_path)}"

            with Image.open(img_path) as img:
                # Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc t·ªëi ƒëa
                max_size = (1280, 1280)
                img.thumbnail(max_size, Image.LANCZOS)

                # T·ªëi ∆∞u ch·∫•t l∆∞·ª£ng v√† l∆∞u v·ªõi t√™n file t·∫°m th·ªùi
                img.save(temp_filename, quality=85, optimize=True)

            return temp_filename

        except Exception as e:
            print(error_color(f"[!] L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}"))
            return img_path  # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n g·ªëc n·∫øu c√≥ l·ªói

    def send_guide(self):
        """G·ª≠i link h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot"""
        guide_url = "YOUR_GUIDE_URL"
        message = self.translate_message(f"üìö Xem h∆∞·ªõng d·∫´n chi ti·∫øt t·∫°i:\n{guide_url}")
        self.send_message(message)


CHAT_URLS = {
    "test": "https://www.messenger.com/t/YOUR_TEST_CHAT_ID",
    "group1": "https://www.messenger.com/t/YOUR_GROUP1_ID",
    "group2": "https://www.messenger.com/t/YOUR_GROUP2_ID",
}

if __name__ == "__main__":
    CURRENT_CHAT = "test"  # Change this to your desired chat
    while True:
        try:
            # Kh·ªüi t·∫°o bot
            meschat = MesChat(
                email_or_phone="YOUR_EMAIL",
                password="YOUR_PASSWORD",
                group_or_chat=CHAT_URLS[CURRENT_CHAT],
            )

            print(
                highlight_color(
                    "Bot ƒë√£ s·∫µn s√†ng. ƒêang l·∫Øng nghe tin nh·∫Øn v√† h√¨nh ·∫£nh..."
                )
            )

            # V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ l·∫Øng nghe tin nh·∫Øn
            while True:
                try:
                    new_message = meschat.new_message_listen()
                    if new_message is not None:
                        meschat.handle_new_message(new_message)
                    time.sleep(1)

                except Exception as e:
                    print(error_color(f"deo nhan duoc tin nhan roi: {str(e)}"))
                    # log n·∫øu c·∫ßn
                    print(error_color(f"duma l·ªói: {type(e).__name__}"))
                    time.sleep(5)  # cc

        except Exception as e:
            print(error_color(f"L·ªói kh·ªüi t·∫°o bot: {str(e)}"))
            print(error_color(f"ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i sau 60 gi√¢y..."))
            time.sleep(60)
